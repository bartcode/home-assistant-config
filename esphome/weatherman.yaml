# WEATHERMAN DASHBOARD
# For Home Assistant and ESPHome
# Designed by Madelena Mak 2022 - https://mmak.es

# Cue "Blame it on the Weatherman" by B*Witched!
substitutions:
  device_name: "weatherman"
  device_description: "Photo frame with weather information and calendar"

# Cue "Blame it on the Weatherman" by B*Witched!
esphome:
  name: "${device_name}"
  comment: "${device_description}"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 30
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - lambda: 'id(initial_data_received) = true;'
                - logger.log: "Sensor data updated: Refreshing display..."
                - component.update: "${device_name}"
                - lambda: 'id(data_updated) = false;'
              else:
                - logger.log: "No sensors updated - skipping display refresh."

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  fast_connect: true
  domain: .iot
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.3.120
    gateway: 192.168.3.1
    subnet: 255.255.255.0
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-901078"
    password: !secret ota_password

# Include custom fonts
font:
  - file: '/config/fonts/GothamRnd-Book.ttf'
    id: font_small_book
    size: 36
  - file: '/config/fonts/GothamRnd-Book.ttf'
    id: font_tiny_book
    size: 20
  - file: '/config/fonts/GothamRnd-Bold.ttf'
    id: font_big_bold
    size: 32
  - file: '/config/fonts/GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 108
    # glyphs: [' ', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C']
  - file: '/config/fonts/GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 30
    # glyphs: [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'M', 'I', 'N']
  - file: '/config/fonts/GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 36
    # glyphs: ['°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', 'M', 'I', 'N']

  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: '/config/fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 96
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F00EE" # mdi-calendar-today
  - file: '/config/fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 48
    glyphs: *mdi-weather-glyphs
  - file: '/config/fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_bigger
    size: 76
    glyphs: *mdi-weather-glyphs

# Include Custom Titles
image:
  # - file: "images/weatherman-title-train.png"
  #   id: title_train
  #   type: BINARY
  - file: "/config/images/weatherman-title-weather.png"
    id: title_weather
    type: BINARY


# Call weather sensors from HA
sensor:
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_manhattan 
  #   id: train_manhattan_due_in

  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_canarsie
  #   id: train_canarsie_due_in
    
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_manhattan
  #   attribute: Next bus due in
  #   id: train_manhattan_next_train_due_in
    
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_canarsie
  #   attribute: Next bus due in
  #   id: train_canarsie_next_train_due_in

  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_temperature_0
    id: weather_temperature_0
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_temperature_1
    id: weather_temperature_1
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_temperature_2
    id: weather_temperature_2
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_temperature_3
    id: weather_temperature_3
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  # - platform: wifi_signal
  #   name: "WiFi Signal Sensor"
  #   id: wifisignal
  #   update_interval: 60min


text_sensor:
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_manhattan
  #   attribute: Due at
  #   id: train_manhattan_due_at
  
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_canarsie
  #   attribute: Due at
  #   id: train_canarsie_due_at
  
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_manhattan
  #   attribute: Next bus
  #   id: train_manhattan_next_train_due_at
  
  # - platform: homeassistant
  #   entity_id: sensor.gtfs_mta_subway_canarsie
  #   attribute: Next bus
  #   id: train_canarsie_next_train_due_at

  # - platform: homeassistant
  #   entity_id: sensor.mta_subway_l_service_status
  #   id: train_service_status

  - platform: homeassistant
    entity_id: weather.hourly
    id: weather_state

  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_condition_now
    id: weather_condition_now
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_condition_0
    id: weather_condition_0
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_timestamp_0
    id: weather_timestamp_0
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_condition_1
    id: weather_condition_1
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_timestamp_1
    id: weather_timestamp_1
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_condition_2
    id: weather_condition_2
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_timestamp_2
    id: weather_timestamp_2
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_condition_3
    id: weather_condition_3
  - platform: homeassistant
    entity_id: sensor.weatherman_data
    attribute: weather_timestamp_3
    id: weather_timestamp_3

  - platform: homeassistant
    entity_id: calendar.baloekie
    attribute: message
    id: calendar_message
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: calendar.baloekie
    attribute: start_time
    id: calendar_start_time
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: calendar.baloekie
    attribute: end_time
    id: calendar_end_time
    on_value:
      then:
         - lambda: 'id(data_updated) = true;'
  # - platform: homeassistant
  #   entity_id: sensor.weatherman_data
  #   attribute: train_status
  #   id: train_status
  # - platform: homeassistant
  #   entity_id: sensor.weatherman_data
  #   attribute: train_status_manhattan
  #   id: train_status_manhattan
  # - platform: homeassistant
  #   entity_id: sensor.weatherman_data
  #   attribute: train_status_canarsie
  #   id: train_status_canarsie


# Define colors
# This design is white on black so this is necessary.
color:
  - id: color_bg
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: color_text
    red: 0%
    green: 0%
    blue: 0%
    white: 100%

# Pins for Waveshare ePaper ESP Board
# spi:
#   clk_pin: GPIO13
#   mosi_pin: GPIO14
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

# Now render everything on the ePaper screen.
display:
  - platform: waveshare_epaper
    update_interval: never
    reset_duration: 2ms
    id: "${device_name}"
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inv2
    rotation: 90°
    lambda: |-
      if (id(initial_data_received) == false) {
        // ATTENTION!
        // Please adjust coordinates I have a different display!
        // ATTENTION!
        it.printf(0, 420, id(font_small_bold), color_text, TextAlign::TOP_CENTER, "Waiting for data...");
      } else {
        // Map weather states to MDI characters.
        std::map<std::string, std::string> icon_map
          {
            {"cloudy", "\U000F0590"},
            {"cloudy-alert", "\U000F0F2F"},
            {"cloudy-arrow-right", "\U000F0E6E"},
            {"fog", "\U000F0591"},
            {"hail", "\U000F0592"},
            {"hazy", "\U000F0F30"},
            {"hurricane", "\U000F0898"},
            {"lightning", "\U000F0593"},
            {"lightning-rainy", "\U000F067E"},
            {"night", "\U000F0594"},
            {"night-partly-cloudy", "\U000F0F31"},
            {"partlycloudy", "\U000F0595"},
            {"partly-lightning", "\U000F0F32"},
            {"partly-rainy", "\U000F0F33"},
            {"partly-snowy", "\U000F0F34"},
            {"partly-snowy-rainy", "\U000F0F35"},
            {"pouring", "\U000F0596"},
            {"rainy", "\U000F0597"},
            {"snowy", "\U000F0598"},
            {"snowy-heavy", "\U000F0F36"},
            {"snowy-rainy", "\U000F067F"},
            {"sunny", "\U000F0599"},
            {"sunny-alert", "\U000F0F37"},
            {"sunny-off", "\U000F14E4"},
            {"sunset", "\U000F059A"},
            {"sunset-down", "\U000F059B"},
            {"sunset-up", "\U000F059C"},
            {"tornado", "\U000F0F38"},
            {"windy", "\U000F059D"},
            {"windy-variant", "\U000F059E"},
            {"calendar-today", "\U000F00EE"}
          };

        // Fill background.
        // it.fill(color_bg);

        // Weather Section
        it.image(0, 88, id(title_weather)); 

        it.printf(100, 158, id(font_mdi_large), color_text, TextAlign::TOP_CENTER, "%s", icon_map[id(weather_condition_now).state.c_str()].c_str());

        it.printf(300, 158, id(font_large_bold), color_text, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_0).state);

        it.printf(135, 282, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_0).state.c_str());
        it.printf(135, 324, id(font_mdi_medium), color_text, TextAlign::TOP_CENTER, "%s", icon_map[id(weather_condition_0).state.c_str()].c_str());
        it.printf(135, 384, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_0).state);

        it.printf(360, 282, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_1).state.c_str());
        it.printf(360, 324, id(font_mdi_medium), color_text, TextAlign::TOP_CENTER, "%s", icon_map[id(weather_condition_1).state.c_str()].c_str());
        it.printf(360, 384, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_1).state);

        it.printf(135, 464, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_2).state.c_str());
        it.printf(135, 504, id(font_mdi_medium), color_text, TextAlign::TOP_CENTER, "%s", icon_map[id(weather_condition_2).state.c_str()].c_str());
        it.printf(135, 564, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_2).state);

        it.printf(360, 462, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%s", id(weather_timestamp_3).state.c_str());
        it.printf(360, 504, id(font_mdi_medium), color_text, TextAlign::TOP_CENTER, "%s", icon_map[id(weather_condition_3).state.c_str()].c_str());
        it.printf(360, 564, id(font_small_book), color_text, TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_3).state);

        if (id(calendar_message).state != "") {
          it.printf(80, 660, id(font_mdi_bigger), color_text, TextAlign::TOP_CENTER, "%s", icon_map["calendar-today"].c_str());
          it.printf(145, 660, id(font_big_bold), color_text, TextAlign::TOP_LEFT, "%s-%s %s", id(calendar_start_time).state.substr(8, 2).c_str(), id(calendar_start_time).state.substr(5, 2).c_str(), id(calendar_start_time).state.substr(11, 5).c_str());
          it.printf(145, 700, id(font_big_bold), color_text, TextAlign::TOP_LEFT, "%s", id(calendar_message).state.c_str());
        }
      }

captive_portal:
